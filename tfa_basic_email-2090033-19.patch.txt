diff --git a/includes/tfa_email.inc b/includes/tfa_email.inc
new file mode 100644
index 0000000..1bcedde
--- /dev/null
+++ b/includes/tfa_email.inc
@@ -0,0 +1,241 @@
+<?php
+
+class TfaBasicEmail extends TfaBasePlugin implements TfaValidationPluginInterface, TfaSendPluginInterface {
+
+  protected $siteEmailAddress;
+  protected $userEmailAddress;
+  protected $account;
+  protected $code;
+  protected $codeLength;
+  protected $language;
+
+  public function __construct(array $context, $account) {
+    parent::__construct($context);
+    if (!empty($context['validate_context']) && !empty($context['validate_context']['code'])) {
+      $this->code = $context['validate_context']['code'];
+    }
+
+    $this->account = $account;
+    $this->siteEmailAddress = variable_get('site_mail', ini_get('sendmail_from'));
+    $this->codeLength = 6;
+    $this->language = user_preferred_language($account);
+
+    $this->userEmailAddress = $this->getUserEmailAddress();
+  }
+
+  /**
+   * Determine if the plugin can run for the current TFA context.
+   *
+   * @return bool
+   */
+  public function ready() {
+    if (empty($this->account->uid)) {
+      return FALSE;
+    }
+    $tfa_data = tfa_basic_get_tfa_data($this->account);
+    if (!is_array($tfa_data['data']['plugins'])) {
+      return FALSE;
+    }
+    if (in_array('tfa_basic_email', $tfa_data['data']['plugins'])) {
+      return TRUE;
+    }
+    return FALSE;
+  }
+
+  /**
+   *
+   */
+  public function begin() {
+    if (!$this->code) {
+      $this->code = $this->generate();
+      if (!$this->sendCode($this->code)) {
+        $this->showErrorMessage();
+      }
+    }
+  }
+
+  public function getForm(array $form, array &$form_state) {
+    $form['code'] = array(
+      '#type' => 'textfield',
+      '#title' => t('Verification Code'),
+      '#required' => TRUE,
+      '#description' => t('Enter @length-character code sent to your email account (@email).', array('@length' => $this->codeLength, '@email' => $this->userEmailAddress)),
+      '#attributes' => array('autocomplete' => array('off')),
+    );
+    $form['actions']['#type'] = 'actions';
+    // @todo optionally report on when code was sent/delivered.
+    $form['actions']['login'] = array(
+      '#type' => 'submit',
+      '#value' => t('Verify'),
+    );
+    $form['actions']['resend'] = array(
+      '#type' => 'submit',
+      '#value' => t('Resend'),
+      '#submit' => array('tfa_form_submit'),
+      '#limit_validation_errors' => array(),
+    );
+
+    return $form;
+  }
+
+  public function validateForm(array $form, array &$form_state) {
+    // If operation is resend then do not attempt to validate code.
+    if ($form_state['values']['op'] === $form_state['values']['resend']) {
+      return TRUE;
+    }
+    elseif (!parent::validate($form_state['values']['code'])) {
+      $this->errorMessages['code'] = t('Invalid code.');
+      return FALSE;
+    }
+    else {
+      return TRUE;
+    }
+  }
+
+  public function showErrorMessage() {
+    $email_error_message = variable_get('tfa_basic_email_error_message', t('An error occured while attempting to email your authentication code.  If you continue to experience difficulties, please contact us.'));
+    drupal_set_message($email_error_message, 'error');
+
+    // clear the message that is automatically generated by core.
+    // We don't want to tell the user "Contact the site administrator..."
+    $unwanted_core_message = t('Unable to send e-mail. Contact the site administrator if the problem persists.');
+    $error_messages = drupal_get_messages('error', TRUE);
+    while (($key = array_search($unwanted_core_message, $error_messages['error'])) !== FALSE) {
+      unset($error_messages['error'][$key]);
+    }
+    // restore any queued error messages
+    foreach ($error_messages['error'] as $key => $message) {
+      drupal_set_message($message, 'error');
+    }
+    // Take the user back to the login page to view the error message.
+    drupal_goto('user');
+  }
+
+  public function submitForm(array $form, array &$form_state) {
+    // Resend code if pushed.
+    if ($form_state['values']['op'] === $form_state['values']['resend']) {
+      $this->code = $this->generate();
+      if (!$this->sendCode($this->code)) {
+        $this->showErrorMessage();
+      }
+      else {
+        drupal_set_message(t('Code resent'));
+      }
+      return FALSE;
+    }
+    else {
+      return parent::submitForm($form, $form_state);
+    }
+  }
+
+  /**
+   * Return context for this plugin.
+   *
+   * @return array
+   */
+  public function getPluginContext() {
+    return array(
+      'code' => $this->code,
+    );
+  }
+
+  protected function generate() {
+    $characters = '0123456789';
+    $string = '';
+    $max = strlen($characters) - 1;
+    for ($p = 0; $p < $this->codeLength; $p++) {
+      $string .= $characters[mt_rand(0, $max)];
+    }
+    return $string;
+  }
+
+  protected function getUserEmailAddress() {
+    $email = $this->account->mail;
+    if (!empty($this->context['user_email_address'])) {
+      $email = $this->context['user_email_address'];
+    }
+    // Allow other modules to update the email address
+    drupal_alter('tfa_basic_email_get_user_email_address', $this->account, $email);
+    return $email;
+  }
+
+  /**
+   * Send the code via the drupal_mail function.
+   *
+   * @param string $code
+   *    The 2-factor authentication code that the challenged user must provide.
+   * @return bool
+   *    Whether or not an error was detected while sending the message.
+   */
+  protected function sendCode($code) {
+    $to = $this->userEmailAddress;
+    $key = 'tfa_basic_email_send_code';
+    $params = array(
+      'site_name' => variable_get('site_name', 'Your login'),
+      'authentication_code' => $code,
+      'langcode' => $this->language->language,
+    );
+    $message_result = drupal_mail('tfa_basic', $key, $to, $this->language, $params);
+    return ($message_result['result'] == TRUE);
+  }
+}
+
+/**
+ * Class TfaBasicEmailSetup
+ */
+class TfaBasicEmailSetup extends TfaBasicEmail implements TfaSetupPluginInterface {
+
+  public function __construct(array $context, $account) {
+    parent::__construct($context, $account);
+  }
+
+  public function begin() {
+    if (empty($this->code)) {
+      $this->code = $this->generate();
+      if (!$this->sendCode($this->code)) {
+        // @todo decide on error text
+        $this->errorMessages[''] = t('Unable to deliver code to that email address.');
+      }
+    }
+  }
+
+  /**
+   * @copydoc TfaSetupPluginInterface::getSetupForm()
+   */
+  public function getSetupForm(array $form, array &$form_state) {
+    $form['email_code'] = array(
+      '#type' => 'textfield',
+      '#title' => t('Verification Code'),
+      '#required' => TRUE,
+      '#description' => t('Enter @length-character code sent to your email account (@email_address).', array('@length' => $this->codeLength, '@email_address' => $this->account->mail)),
+    );
+    $form['actions']['verify'] = array(
+      '#type' => 'submit',
+      '#value' => t('Verify and save'),
+    );
+
+    return $form;
+  }
+
+  /**
+   * @copydoc TfaSetupPluginInterface::validateSetupForm()
+   */
+  public function validateSetupForm(array $form, array &$form_state) {
+    if (!$this->validate($form_state['values']['email_code'])) {
+      $this->errorMessages['email_code'] = t('Invalid code. Please try again.');
+      return FALSE;
+    }
+    else {
+      return TRUE;
+    }
+  }
+
+  /**
+   * @copydoc TfaSetupPluginInterface::submitSetupForm()
+   */
+  public function submitSetupForm(array $form, array &$form_state) {
+    // No submission handling required.
+    return TRUE;
+  }
+
+}
diff --git a/tfa_basic.info b/tfa_basic.info
index 914ec6f..e032824 100644
--- a/tfa_basic.info
+++ b/tfa_basic.info
@@ -10,6 +10,7 @@ files[] = includes/tfa_totp.inc
 files[] = includes/tfa_trusted_browser.inc
 files[] = includes/tfa_recovery.inc
 files[] = includes/tfa_sms.inc
+files[] = includes/tfa_email.inc
 files[] = includes/tfa_help.inc
 
 files[] = includes/googleauthenticator/GoogleAuthenticator.php
diff --git a/tfa_basic.install b/tfa_basic.install
index dc8b681..c5274a4 100644
--- a/tfa_basic.install
+++ b/tfa_basic.install
@@ -295,4 +295,7 @@ function tfa_basic_uninstall() {
   variable_del('tfa_basic_twilio_account_sid');
   variable_del('tfa_basic_twilio_account_token');
   variable_del('tfa_basic_sms_nanp_validate');
+  variable_del('tfa_basic_email_error_message');
+  variable_del('tfa_basic_email_subject_text');
+  variable_del('tfa_basic_email_message_text');
 }
diff --git a/tfa_basic.module b/tfa_basic.module
index af6254e..4550145 100644
--- a/tfa_basic.module
+++ b/tfa_basic.module
@@ -116,7 +116,15 @@ function tfa_basic_menu() {
     'type' => MENU_CALLBACK,
     'file' => 'tfa_basic.pages.inc',
   );
-
+  $items['user/%user/security/tfa/email-setup'] = array(
+    'title' => 'TFA setup',
+    'page callback' => 'drupal_get_form',
+    'page arguments' => array('tfa_basic_setup_form', 1, 'tfa_basic_email'),
+    'access callback' => 'tfa_basic_setup_access',
+    'access arguments' => array(1, 'setup own tfa'),
+    'type' => MENU_CALLBACK,
+    'file' => 'tfa_basic.pages.inc',
+  );
   return $items;
 }
 
@@ -176,6 +184,10 @@ function tfa_basic_tfa_api() {
       'class' => 'TfaBasicSms',
       'name' => 'Twilio SMS',
     ),
+    'tfa_basic_email' => array(
+      'class' => 'TfaBasicEmail',
+      'name' => 'Email',
+    ),
     'tfa_basic_help' => array(
       'class' => 'TfaBasicHelp',
       'name' => 'Help page',
@@ -227,6 +239,17 @@ function tfa_basic_sms_create($context) {
 }
 
 /**
+ * Create TfaBasicEmail plugin.
+ *
+ * @param array $context
+ * @return TfaBasicEmail
+ */
+function tfa_basic_email_create($context) {
+  $account = user_load($context['uid']);
+  return new TfaBasicEmail($context, $account);
+}
+
+/**
  * Get a Twilio services client.
  *
  * @return Services_Twilio|FALSE
@@ -641,6 +664,32 @@ function tfa_basic_form_tfa_admin_settings_alter(&$form, &$form_state, $form_id)
     $form['tfa_fallback']['tfa_basic_sms']['enable']['#description'] = t('Not available for use because Twilio PHP library is not installed. See TFA Basic README.txt.');
   }
 
+  $email_states = array(
+    'visible' => array(
+      array(
+        array(':input[name="tfa_fallback[tfa_basic_email][enable]"]' => array('checked' => TRUE)),
+        'or',
+        array(':input[name="tfa_validate"]' => array('value' => 'tfa_basic_email'))
+      )
+    )
+  );
+  $form['tfa_basic_email_subject_text'] = array(
+    '#type' => 'textfield',
+    '#title' => t('Email subject text'),
+    '#default_value' => variable_get('tfa_basic_email_subject_text', '@site_name verification code'),
+    '#description' => t('The email subject sent to user.'),
+    '#weight' => 1,
+    '#states' => $email_states
+  );
+  $form['tfa_basic_email_message_text'] = array(
+    '#type' => 'textfield',
+    '#title' => t('Email message text'),
+    '#default_value' => variable_get('tfa_basic_email_message_text', 'Verification code: @code'),
+    '#description' => t('The email message sent to user.'),
+    '#weight' => 1,
+    '#states' => $email_states
+  );
+
   $form['tfa_fallback']['tfa_basic_help']['weight']['#default_value'] = 10;
   $form['tfa_fallback']['tfa_basic_help']['weight']['#disabled'] = TRUE;
   $default_help = t('Contact support to reset your access');
@@ -702,6 +751,14 @@ function tfa_basic_form_validate($form, &$form_state) {
       form_set_error('', t('An account field for mobile number storage is required to use the Twilio SMS plugin. Consult TFA Basic README.txt for more info.'));
     }
   }
+  if (!empty($values['tfa_fallback']) && (!empty($values['tfa_fallback']['tfa_basic_email']['enable']) || $values['tfa_validate'] === 'tfa_basic_email')) {
+    if (empty($form_state['values']['tfa_basic_email_subject_text'])) {
+      form_set_error('tfa_basic_email_subject_text', t('Email subject required if Email plugin is enabled.'));
+    }
+    if (empty($form_state['values']['tfa_basic_email_message_text'])) {
+      form_set_error('tfa_basic_email_message_text', t('Email message required if Email plugin is enabled.'));
+    }
+  }
 }
 
 /**
@@ -726,6 +783,12 @@ function tfa_basic_form_submit($form, &$form_state) {
   if (isset($form_state['values']['tfa_basic_sms_nanp_validate'])) {
     variable_set('tfa_basic_sms_nanp_validate', $form_state['values']['tfa_basic_sms_nanp_validate']);
   }
+  if (!empty($form_state['values']['tfa_basic_email_subject_text'])) {
+    variable_set('tfa_basic_email_subject_text', $form_state['values']['tfa_basic_email_subject_text']);
+  }
+  if (!empty($form_state['values']['tfa_basic_email_message_text'])) {
+    variable_set('tfa_basic_email_message_text', $form_state['values']['tfa_basic_email_message_text']);
+  }
   if (!empty($form_state['values']['tfa_basic_help_text'])) {
     variable_set('tfa_basic_help_text', $form_state['values']['tfa_basic_help_text']);
   }
@@ -751,6 +814,10 @@ function tfa_basic_mail($key, &$message, $params) {
       $message['body']['body'] = tfa_basic_tfa_disabled_body($message, $params);
       break;
 
+    case 'tfa_basic_email_send_code':
+      $message['subject'] = tfa_basic_tfa_basic_email_send_code_subject($message, $params);
+      $message['body']['body'] = tfa_basic_tfa_basic_email_send_code_body($message, $params);
+      break;
   }
 }
 
@@ -801,3 +868,39 @@ If you did not take this action, please contact a site administrator immediately
 
   return token_replace($text, array('user' => $params['account']), array('language' => $message['language'], 'sanitize' => FALSE, 'clear' => TRUE));
 }
+
+/**
+ * Returns text appropriate for an email subject when someone is authenticating.
+ *
+ * @param array $message
+ *   The message, must include the language.
+ * @param array $params
+ *   Parameters from drupal_mail.
+ *
+ * @return string
+ *   Message subject.
+ */
+function tfa_basic_tfa_basic_email_send_code_subject($message, $params) {
+  $options = array('langcode' => $message['language']->language);
+  $subject_tpl = variable_get('tfa_basic_email_subject_text', '@site_name verification code');
+  $text = t($subject_tpl, array('@site_name' => $params['site_name']), $options);
+  return $text;
+}
+
+/**
+ * Returns text appropriate for an email body when someone is authenticating.
+ *
+ * @param array $message
+ *   The message, must include the language.
+ * @param array $params
+ *   Parameters from drupal_mail.
+ *
+ * @return string
+ *   Message body.
+ */
+function tfa_basic_tfa_basic_email_send_code_body($message, $params) {
+  $options = array('langcode' => $message['language']->language);
+  $body_tpl = variable_get('tfa_basic_email_message_text', 'Verification code: @code');
+  $text = t($body_tpl, array('@code' => $params['authentication_code']), $options);
+  return $text;
+}
diff --git a/tfa_basic.pages.inc b/tfa_basic.pages.inc
index 44eff39..f3d6f75 100644
--- a/tfa_basic.pages.inc
+++ b/tfa_basic.pages.inc
@@ -36,6 +36,8 @@ function tfa_basic_overview($form, &$form_state, $account) {
     $output['app'] = _tfa_basic_plugin_setup_form_overview('tfa_basic_totp', $account, $user_tfa);
     // SMS setup.
     $output['sms'] = _tfa_basic_plugin_setup_form_overview('tfa_basic_sms', $account, $user_tfa);
+    // SMS setup.
+    $output['email'] = _tfa_basic_plugin_setup_form_overview('tfa_basic_email', $account, $user_tfa);
     // Trusted browsers.
     $output['trust'] = _tfa_basic_plugin_setup_form_overview('tfa_basic_trusted_browser', $account, $user_tfa);
     // Recovery codes.
@@ -128,6 +130,29 @@ function _tfa_basic_plugin_setup_form_overview($plugin, $account, array $user_tf
       }
       break;
 
+    case 'tfa_basic_email';
+      $output = array(
+        'heading' => array(
+          '#theme' => 'html_tag',
+          '#tag' => 'h3',
+          '#value' => t('Email'),
+        ),
+        'description' => array(
+          '#theme' => 'html_tag',
+          '#tag' => 'p',
+          '#value' => t('Receive verification code via your account\'s email address (@email_address).', array('@email_address' => $account->mail)),
+        ),
+        'link' => array(
+          '#prefix' => '<p>',
+          '#theme' => 'link',
+          '#path' => 'user/' . $account->uid . '/security/tfa/email-setup',
+          '#text' => !$enabled ? t('Set up email delivery') : t('Reset email delivery'),
+          '#options' => array('attributes' => array(), 'html' => FALSE),
+          '#suffix' => '</p>',
+        ),
+      );
+      break;
+
     case 'tfa_basic_trusted_browser':
       $trusted_browser = new TfaTrustedBrowserSetup(array('uid' => $account->uid));
       $trusted_browsers = array();
@@ -465,6 +490,15 @@ function tfa_basic_setup_form($form, &$form_state, $account, $method = 'tfa_basi
         }
         break;
 
+      case 'tfa_basic_email':
+        drupal_set_title(t('TFA setup - Email'));
+        $setup_plugin = new TfaBasicEmailSetup($context, $account);
+        $setup_plugin->begin();
+        $tfa_setup = new TfaSetup($setup_plugin, $context);
+        $form = $tfa_setup->getForm($form, $form_state);
+        $form_state['storage'][$method] = $tfa_setup;
+        break;
+
       // List previously saved recovery codes. Note, this is not a plugin.
       case 'recovery_codes_list':
         $recovery = new TfaBasicRecoveryCodeSetup(array('uid' => $account->uid));
@@ -677,6 +711,7 @@ function _tfa_basic_full_setup_steps() {
   $plugins = array(
     'tfa_basic_totp',
     'tfa_basic_sms',
+    'tfa_basic_email',
     'tfa_basic_trusted_browser',
     'tfa_basic_recovery_code',
   );
@@ -708,6 +743,10 @@ function _tfa_basic_set_next_step(&$form_state, $this_step, $skipped_step = FALS
         $output = $skipped_step ? t('SMS code delivery not enabled.') : t('SMS code verified.');
         break;
 
+      case 'tfa_basic_email':
+        $output = $skipped_step ? t('Email code delivery not enabled.') : t('Email code verified.');
+        break;
+
       case 'tfa_basic_trusted_browser':
         // Handle whether the checkbox was unchecked.
         if ($skipped_step || empty($form_state['values']['trust'])) {
